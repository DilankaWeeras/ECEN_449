#include <xparameters.h>
#include <xgpio.h>
#include <xstatus.h>
#include <xil_printf.h>

#define led XPAR_LED_DEVICE_ID
#define btnsw XPAR_BTN_SW_DEVICE_ID
#define WAIT_VAL 10000000

int delay(void);

int main()
{
	int count;
	int count_masked;

	int dips;

	int led_final;

	XGpio leds;
	XGpio btn_sw;

	XGpio_Initialize(&leds ,led);
	XGpio_Initialize(&btn_sw ,btnsw);
	XGpio_SetDataDirection(&leds ,1, 0);
	XGpio_SetDataDirection(&btn_sw , 1, 1);

	count = 0;
	xil_printf("start\n\n-------------------------------\n");
	while(1)
	{
		int read = XGpio_DiscreteRead(&btn_sw,1);
		int sw = read & 0xF;
		int butt = read & 0xF0;

		xil_printf("Value of button: 0x%x\n\r", butt);


		if(butt == 16) // if button zero is pressed must have the bitwise and to only check the lowest bit of the case
		{
			count++; // increment count
			count_masked = count & 0xF; // assign count_masked to the lower 4 bits of count
			xil_printf("Value of count incrementing = 0x%x\n\r", count_masked); // print count in hex

			//XGpio_DiscreteWrite(&leds, 1, count_masked); // write the lower 4 bits of count to the leds
		}
		else if(butt == 32) // if button 2 is pressed
		{
			count--; // decrement count
			count_masked = count & 0xF; // assign count_masked to the lower 4 bits of count
			xil_printf("Value of count decrementing = 0x%x\n\r", count_masked); // print count in hex

			//XGpio_DiscreteWrite(&leds, 1, count_masked); // write to the leds
		}
		else if(butt == 64)
		{
			count_masked = count & 0xF; // reassign count_masked (really wont do anything)
			xil_printf("Value of count = 0x%x\n\r", count_masked); // print count_masked
			led_final = count_masked;
		}
		else if(butt == 128) // if button 4 is pressed
		{   dips = sw >> 4;
			xil_printf("Value of dips  = 0x%x\n\r", dips);
			led_final = dips;


			XGpio_DiscreteWrite(&leds, 1, dips);
		}
		/*else // No buttons are pressed
		{
			count_masked = count & 0xF;
			xil_printf("Count no change = 0x%x\n\r", count_masked);
		}*/
		XGpio_DiscreteWrite(&leds, 1, led_final); // write to the leds
		
		delay();
	}
	return(0);
}

int delay(void)
{
	volatile int delay_count = 0;
	while(delay_count < WAIT_VAL)
	{
		delay_count++;
	}
	return (0);
}
